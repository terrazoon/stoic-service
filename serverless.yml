# TODO
# seneca.json, epictetus.json, marcus_aurelius.json
# get quote api working again
# serverless-s3-sync
# custom domain
# unit tests

service: stoic-service
# app and org for use with dashboard.serverless.com
app: new-scheduler-app
org: razorfangius

plugins:
  - serverless-python-requirements

provider:
  name: aws
  timeout: 30
  memorySize: 512
  runtime: python3.8
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'table/emailAddresses'

functions:
  StoicQuote:
    handler: src/controllers/quote_controller.stoic_quote
    role: myCustRole0
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: true
          input:
            key: 'min5'

  AddQuotesAPI:
    handler: src/controllers/quote_controller.add_quotes
    role: myCustRole0
    events:
      - http:
          path: add_quotes
          method: post
          cors: true

  StoicQuoteAPI:
    handler: src/controllers/quote_controller.stoic_quote
    role: myCustRole0
    events:
      - http:
          path: stoic_quote
          method: get
          cors: true

  SubscribeAPI:
    handler: src/controllers/subscription_controller.subscribe
    role: myCustRole0
    events:
      - http:
          path: subscribe/{email}
          method: post
          cors: true

  UnsubscribeAPI:
    handler: src/controllers/subscription_controller.unsubscribe
    role: myCustRole0
    events:
      - http:
          path: unsubscribe/{email}
          method: post
          cors: true


resources:
  Resources:

    QuotesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: vvhvhvh-stoic-service-dev

    EmailAddressTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: emailAddresses
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    myCustRole0:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: MyCustRole0
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:getObject
                    - s3:putObject
                    - s3:deleteObject
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Ref: QuotesBucket
                - Effect: Allow
                  Action:
                    - ses:sendEmail
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:ses'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'identity/gmail.com'
                - Effect: "Allow"
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/emailAddresses'
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/quotes'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
  Outputs:
    ApiUrl:
      Description: "The API Gateway URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.us-east-1.amazonaws.com/dev"